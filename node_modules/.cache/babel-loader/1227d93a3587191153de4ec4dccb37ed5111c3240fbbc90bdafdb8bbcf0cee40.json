{"ast":null,"code":"// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   const auxiliaryArray = array.slice();\n//   mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n//   if (startIdx === endIdx) return;  \n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   // we will use aulixary in place of main arry because we are overwriting changes in main array\n//   // so go according to main array\n//   mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//   mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//   // This below 2 lines will give wrong answer reason explained above\n//   // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n//   // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n// }\n\n// function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n//   let k = startIdx;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n//     animations.push([i, j]); // push them once to change their color.\n//     animations.push([i, j]); // push them a second time to revert their color.\n//     if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//       // We overwrite the value at index k in the original array with the\n//       // value at index i in the auxiliary array.\n//       animations.push([k, auxiliaryArray[i]]); // push a third time to change the height\n//       mainArray[k++] = auxiliaryArray[i++];\n//     } else {\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, i]); \n//     animations.push([i, i]); \n//     animations.push([k, auxiliaryArray[i]]);\n//     mainArray[k++] = auxiliaryArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([j, j]);\n//     animations.push([j, j]);\n//     animations.push([k, auxiliaryArray[j]]);\n//     mainArray[k++] = auxiliaryArray[j++];\n//   }\n// }\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  const animationStep = [i, j, someValue];\n  animations.push([middleIdx, middleIdx]); // IMP YELLOW\n  // we will use aulixary in place of main arry because we are overwriting changes in main array\n  // so go according to main array\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  // This below 2 lines will give wrong answer reason explained above\n  // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n  // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]); // push them once to change their color. // IMP RED\n    animations.push([i, j]); // push them a second time to revert their color. // IMP GREEN\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]); // push a third time to change the height\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]);\n    animations.push([i, i]);\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","animationStep","i","j","someValue","push","doMerge","k"],"sources":["/Users/nilaypatel/Desktop/stufff/coding/current projects/nilay_website/website 3 (sorting visulizer)/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/sortingAlgorithms.js"],"sourcesContent":["// export function getMergeSortAnimations(array) {\n//   const animations = [];\n//   if (array.length <= 1) return array;\n//   const auxiliaryArray = array.slice();\n//   mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n//   return animations;\n// }\n\n// function mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n//   if (startIdx === endIdx) return;  \n//   const middleIdx = Math.floor((startIdx + endIdx) / 2);\n//   // we will use aulixary in place of main arry because we are overwriting changes in main array\n//   // so go according to main array\n//   mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n//   mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n//   // This below 2 lines will give wrong answer reason explained above\n//   // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n//   // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n//   doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n// }\n\n// function doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n//   let k = startIdx;\n//   let i = startIdx;\n//   let j = middleIdx + 1;\n//   while (i <= middleIdx && j <= endIdx) {\n//     animations.push([i, j]); // push them once to change their color.\n//     animations.push([i, j]); // push them a second time to revert their color.\n//     if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n//       // We overwrite the value at index k in the original array with the\n//       // value at index i in the auxiliary array.\n//       animations.push([k, auxiliaryArray[i]]); // push a third time to change the height\n//       mainArray[k++] = auxiliaryArray[i++];\n//     } else {\n//       animations.push([k, auxiliaryArray[j]]);\n//       mainArray[k++] = auxiliaryArray[j++];\n//     }\n//   }\n//   while (i <= middleIdx) {\n//     animations.push([i, i]); \n//     animations.push([i, i]); \n//     animations.push([k, auxiliaryArray[i]]);\n//     mainArray[k++] = auxiliaryArray[i++];\n//   }\n//   while (j <= endIdx) {\n//     animations.push([j, j]);\n//     animations.push([j, j]);\n//     animations.push([k, auxiliaryArray[j]]);\n//     mainArray[k++] = auxiliaryArray[j++];\n//   }\n// }\n\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n  if (startIdx === endIdx) return;  \n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  const animationStep = [i, j, someValue];\n  animations.push([middleIdx, middleIdx]); // IMP YELLOW\n  // we will use aulixary in place of main arry because we are overwriting changes in main array\n  // so go according to main array\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  // This below 2 lines will give wrong answer reason explained above\n  // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n  // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    animations.push([i, j]); // push them once to change their color. // IMP RED\n    animations.push([i, j]); // push them a second time to revert their color. // IMP GREEN\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]); // push a third time to change the height\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([i, i]); \n    animations.push([i, i]); \n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([j, j]);\n    animations.push([j, j]);\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}