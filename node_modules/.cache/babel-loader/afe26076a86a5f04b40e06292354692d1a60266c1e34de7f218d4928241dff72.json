{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\nfunction quickSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  let animationStep = [middleIdx, middleIdx, 1];\n  animations.push(animationStep); // push to mark partition color\n  // we will use aulixary in place of main arry because we are overwriting changes in main array\n  // so go according to main array\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  // This below 2 lines will give wrong answer reason explained above\n  // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n  // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction quickSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    let animationStep = [i, j, 2];\n    animations.push(animationStep); // push to compare indices\n    animationStep = [i, j, 3];\n    animations.push(animationStep); // push to finalize the values in which comparision occured\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animationStep = [k, auxiliaryArray[i], 4];\n      animations.push(animationStep); // push to change the height\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animationStep = [k, auxiliaryArray[j], 4];\n      animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    let animationStep = [i, i, 2];\n    animations.push(animationStep);\n    animationStep = [i, i, 3];\n    animations.push(animationStep);\n    animationStep = [k, auxiliaryArray[i], 4];\n    animations.push(animationStep);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    let animationStep = [j, j, 2];\n    animations.push(animationStep);\n    animationStep = [j, j, 3];\n    animations.push(animationStep);\n    animationStep = [k, auxiliaryArray[j], 4];\n    animations.push(animationStep);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"names":["getQuickSortAnimations","array","animations","length","quickSortHelper","auxiliaryArray","mainArray","startIdx","endIdx","middleIdx","Math","floor","animationStep","push","mergeSortHelper","doMerge","quickSort","k","i","j"],"sources":["/Users/nilaypatel/Desktop/stufff/coding/current projects/nilay_website/website 3 (sorting visulizer)/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/quick_sort.js"],"sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function quickSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations){\n    if (startIdx === endIdx) return;  \n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    let animationStep = [middleIdx, middleIdx, 1];\n    animations.push(animationStep); // push to mark partition color\n    // we will use aulixary in place of main arry because we are overwriting changes in main array\n    // so go according to main array\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    // This below 2 lines will give wrong answer reason explained above\n    // mergeSortHelper(mainArray, startIdx, middleIdx, auxiliaryArray, animations);\n    // mergeSortHelper(mainArray, middleIdx + 1, endIdx, auxiliaryArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function quickSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      let animationStep = [i, j, 2];\n      animations.push(animationStep); // push to compare indices\n      animationStep = [i, j, 3];\n      animations.push(animationStep); // push to finalize the values in which comparision occured\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animationStep = [k, auxiliaryArray[i], 4];\n        animations.push(animationStep); // push to change the height\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        animationStep = [k, auxiliaryArray[j], 4];\n        animations.push(animationStep);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      let animationStep = [i, i, 2];\n      animations.push(animationStep);\n      animationStep = [i, i, 3];\n      animations.push(animationStep);\n      animationStep = [k, auxiliaryArray[i], 4];\n        animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      let animationStep = [j, j, 2];\n      animations.push(animationStep); \n      animationStep = [j, j, 3];\n      animations.push(animationStep);\n      animationStep = [k, auxiliaryArray[j], 4];\n        animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}