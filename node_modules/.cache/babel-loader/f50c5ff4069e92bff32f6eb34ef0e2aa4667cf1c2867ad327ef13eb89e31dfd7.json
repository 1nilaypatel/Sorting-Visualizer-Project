{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSort(array, 0, array.length - 1, animations);\n  return animations;\n}\nfunction quickSort(mainArray, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  var pivot_pos = quick_partition(mainArray, startIdx, endIdx, animations);\n  quickSort(mainArray, startIdx, pivot_pos - 1, animations);\n  quickSort(mainArray, pivot_pos + 1, endIdx, animations);\n}\nfunction quick_partition(mainArray, startIdx, endIdx, animations) {\n  var i = startIdx + 1;\n  var piv = mainArray[startIdx];\n  let animationStep = [startIdx, startIdx, 1];\n  animations.push(animationStep);\n  for (var j = startIdx + 1; j <= endIdx; j++) {\n    if (piv > mainArray[j]) {\n      let animationStep = [j, j, 1];\n      animations.push(animationStep);\n      animationStep = [i, i, 2];\n      animations.push(animationStep);\n      animationStep = [j, j, 2];\n      animations.push(animationStep);\n      var temp = mainArray[i];\n      mainArray[i] = mainArray[j];\n      mainArray[j] = temp;\n      animationStep = [i, i, 2];\n      animations.push(animationStep);\n      animationStep = [j, j, 2];\n      animations.push(animationStep);\n      animationStep = [i, i, 4];\n      animations.push(animationStep);\n      animationStep = [j, j, 4];\n      animations.push(animationStep);\n      animationStep = [i, i, 5];\n      animations.push(animationStep);\n      animationStep = [j, j, 5];\n      animations.push(animationStep);\n      i++;\n    }\n  }\n  animationStep = [startIdx, startIdx, 2];\n  animations.push(animationStep);\n  animationStep = [i - 1, i - 1, 2];\n  animations.push(animationStep);\n  var temp = mainArray[i - 1];\n  mainArray[i - 1] = mainArray[startIdx];\n  mainArray[startIdx] = temp;\n  animationStep = [startIdx, startIdx, 2];\n  animations.push(animationStep);\n  animationStep = [i - 1, i - 1, 2];\n  animations.push(animationStep);\n  animationStep = [startIdx, startIdx, 4];\n  animations.push(animationStep);\n  animationStep = [i - 1, i - 1, 4];\n  animations.push(animationStep);\n  for (var t = startIdx; t <= i; t++) {\n    animationStep = [t, t, 3];\n    animations.push(animationStep);\n  }\n  return i - 1;\n}","map":{"version":3,"names":["getQuickSortAnimations","array","animations","length","quickSort","mainArray","startIdx","endIdx","pivot_pos","quick_partition","i","piv","animationStep","push","j","temp","t"],"sources":["/Users/nilaypatel/Desktop/stufff/coding/current projects/nilay_website/website 3 (sorting visulizer)/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/quick_sort.js"],"sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSort(array, 0, array.length - 1, animations);\n    return animations;\n  }\n  \n  function quickSort(mainArray, startIdx, endIdx, animations){\n    if (startIdx >= endIdx) return;  \n\n    var pivot_pos = quick_partition(mainArray, startIdx, endIdx, animations);\n    quickSort(mainArray, startIdx, pivot_pos - 1, animations);\n    quickSort(mainArray, pivot_pos + 1, endIdx, animations);\n  }\n  \n  function quick_partition(mainArray, startIdx, endIdx, animations){\n    var i = startIdx + 1;\n    var piv = mainArray[startIdx];\n    let animationStep = [startIdx, startIdx, 1];\n    animations.push(animationStep);\n    for(var j = startIdx + 1; j <= endIdx; j++){\n        if(piv > mainArray[j]){\n            let animationStep = [j, j, 1];\n            animations.push(animationStep);\n\n            animationStep = [i, i, 2];\n            animations.push(animationStep);\n            animationStep = [j, j, 2];\n            animations.push(animationStep);\n\n            var temp = mainArray[i];\n            mainArray[i] = mainArray[j];\n            mainArray[j] = temp;\n\n            animationStep = [i, i, 2];\n            animations.push(animationStep);\n            animationStep = [j, j, 2];\n            animations.push(animationStep);\n            animationStep = [i, i, 4];\n            animations.push(animationStep);\n            animationStep = [j, j, 4];\n            animations.push(animationStep);\n            animationStep = [i, i, 5];\n            animations.push(animationStep);\n            animationStep = [j, j, 5];\n            animations.push(animationStep);\n\n            i++;\n        }\n    }\n    animationStep = [startIdx, startIdx, 2];\n    animations.push(animationStep);\n    animationStep = [i - 1, i - 1, 2];\n    animations.push(animationStep);\n\n    var temp = mainArray[i - 1];\n    mainArray[i - 1] = mainArray[startIdx];\n    mainArray[startIdx] = temp;\n\n    animationStep = [startIdx, startIdx, 2];\n    animations.push(animationStep);\n    animationStep = [i - 1, i - 1, 2];\n    animations.push(animationStep);\n    animationStep = [startIdx, startIdx, 4];\n    animations.push(animationStep);\n    animationStep = [i - 1, i - 1, 4];\n    animations.push(animationStep);\n\n    for(var t = startIdx; t <= i; t++){\n        animationStep = [t, t, 3];\n        animations.push(animationStep);\n    }\n\n    return i - 1;\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}