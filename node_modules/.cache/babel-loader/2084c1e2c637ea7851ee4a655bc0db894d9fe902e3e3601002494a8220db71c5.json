{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\nfunction quickSortHelper(mainArray, startIdx, endIdx, animations) {\n  if (startIdx >= endIdx) return;\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\nfunction quickSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    let animationStep = [i, j, 2];\n    animations.push(animationStep); // push to compare indices\n    animationStep = [i, j, 3];\n    animations.push(animationStep); // push to finalize the values in which comparision occured\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animationStep = [k, auxiliaryArray[i], 4];\n      animations.push(animationStep); // push to change the height\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animationStep = [k, auxiliaryArray[j], 4];\n      animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    let animationStep = [i, i, 2];\n    animations.push(animationStep);\n    animationStep = [i, i, 3];\n    animations.push(animationStep);\n    animationStep = [k, auxiliaryArray[i], 4];\n    animations.push(animationStep);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    let animationStep = [j, j, 2];\n    animations.push(animationStep);\n    animationStep = [j, j, 3];\n    animations.push(animationStep);\n    animationStep = [k, auxiliaryArray[j], 4];\n    animations.push(animationStep);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"names":["getQuickSortAnimations","array","animations","length","quickSortHelper","mainArray","startIdx","endIdx","mergeSortHelper","auxiliaryArray","middleIdx","doMerge","quickSort","k","i","j","animationStep","push"],"sources":["/Users/nilaypatel/Desktop/stufff/coding/current projects/nilay_website/website 3 (sorting visulizer)/Sorting-Visualizer-Tutorial-master/src/sortingAlgorithms/quick_sort.js"],"sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n  }\n  \n  function quickSortHelper(mainArray, startIdx, endIdx, animations){\n    if (startIdx >= endIdx) return;  \n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function quickSort(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      let animationStep = [i, j, 2];\n      animations.push(animationStep); // push to compare indices\n      animationStep = [i, j, 3];\n      animations.push(animationStep); // push to finalize the values in which comparision occured\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animationStep = [k, auxiliaryArray[i], 4];\n        animations.push(animationStep); // push to change the height\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        animationStep = [k, auxiliaryArray[j], 4];\n        animations.push(animationStep);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      let animationStep = [i, i, 2];\n      animations.push(animationStep);\n      animationStep = [i, i, 3];\n      animations.push(animationStep);\n      animationStep = [k, auxiliaryArray[i], 4];\n        animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      let animationStep = [j, j, 2];\n      animations.push(animationStep); \n      animationStep = [j, j, 3];\n      animations.push(animationStep);\n      animationStep = [k, auxiliaryArray[j], 4];\n        animations.push(animationStep);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}